[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
user=mysql
bind-address=0.0.0.0

# Uncomment this to get slow query logging.  Use only in development, turn off in production.
slow-query-log

# Uncomment this to get full query logging.  Use only in development, turn off in production.
# general-log

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

#####################################################################################
#
# Performance parameters -- adjust as necessary
#

# InnoDB log file size. Needs to be 10x the size of the largest TEXT or BLOB
# field.
# Ref: http://www.percona.com/blog/2006/07/03/choosing-proper-innodb_log_file_size/
# Ref: http://stackoverflow.com/questions/18806377/setting-the-right-mysql-innodb-log-file-size
# Ref: http://www.percona.com/blog/2008/11/21/how-to-calculate-a-good-innodb-log-file-size/
innodb_log_file_size=64M

# The stack size for each thread. Many of the limits detected by the crash-me
# test are dependent on this value.
thread_stack=3M

# The maximum size of one packet or any generated/intermediate string.
# You must increase this value if you are using large BLOB columns or
# long strings. It should be as big as the largest BLOB you want to use.
# The protocol limit for max_allowed_packet is 1GB. The value should
# be a multiple of 1024; nonmultiples are rounded down to the nearest multiple. 
max_allowed_packet=256M

# Each session that needs to do a sort allocates a buffer of this size.
# sort_buffer_size is not specific to any storage engine and applies
# in a general manner for optimization. See Section 8.13.9, "ORDER BY
# Optimization", for example.
# If you see many Sort_merge_passes per second in SHOW GLOBAL STATUS
# output, you can consider increasing the sort_buffer_size value to
# speed up ORDER BY or GROUP BY operations that cannot be improved
# with query optimization or improved indexing. The entire buffer
# is allocated even if it is not all needed, so setting it larger
# than required globally will slow down most queries that sort. It
# is best to increase it as a session setting, and only for the sessions
# that need a larger size. On Linux, there are thresholds of 256KB and
# 2MB where larger values may significantly slow down memory allocation,
# so you should consider staying below one of those values.
sort_buffer_size=1M

# Each thread that does a sequential scan for a MyISAM table allocates
# a buffer of this size (in bytes) for each table it scans. If you do
# many sequential scans, you might want to increase this value, which
# defaults to 131072. The value of this variable should be a multiple
# of 4KB. If it is set to a value that is not a multiple of 4KB,
# its value will be rounded down to the nearest multiple of 4KB. 
read_buffer_size=1M

# When reading rows from a MyISAM table in sorted order following a
# key-sorting operation, the rows are read through this buffer to avoid
# disk seeks. See Section 8.13.9, "ORDER BY Optimization". Setting
# the variable to a large value can improve ORDER BY performance by a lot.
read_rnd_buffer_size=16M

# Index blocks for MyISAM tables are buffered and are shared by all
# threads. key_buffer_size is the size of the buffer used for index
# blocks. The key buffer is also known as the key cache.
# You can increase the value to get better index handling for all
# reads and multiple writes; on a system whose primary function is
# to run MySQL using the MyISAM storage engine, 25% of the machine's
# total memory is an acceptable value for this variable.
key_buffer_size=32M

# The size in bytes of the memory buffer InnoDB uses to cache data
# and indexes of its tables. The default value is 128MB, increased
# from a historical default of 8MB. The maximum value depends on the
# CPU architecture, 32-bit or 64-bit. For 32-bit systems, the CPU
# architecture and operating system sometimes impose a lower practical
# maximum size. When the size of the buffer pool is greater than
# 1GB, setting innodb_buffer_pool_instances to a value greater than
# 1 can improve the scalability on a busy server.
# The larger you set this value, the less disk I/O is needed to access
# data in tables. On a dedicated database server, you may set this
# to up to 80% of the machine physical memory size.
innodb_buffer_pool_size=256M

# How many threads the server should cache for reuse. When a client
# disconnects, the client's threads are put in the cache if there
# are fewer than thread_cache_size threads there. Requests for threads
# are satisfied by reusing threads taken from the cache if possible,
# and only when the cache is empty is a new thread created. This
# variable can be increased to improve performance if you have a
# lot of new connections.
thread_cache_size=8

# The amount of memory allocated for caching query results. The
# default value is 0, which disables the query cache. To reduce
# overhead significantly, you should also start the server with
# query_cache_type=0 if you will not be using the query cache.
# The permissible values are multiples of 1024; other values are
# rounded down to the nearest multiple. Note that query_cache_size
# bytes of memory are allocated even if query_cache_type is set
# to 0. See Section 8.9.3.3, "Query Cache Configuration", for
# more information.
# The query cache needs a minimum size of about 40KB to allocate
# its structures. (The exact size depends on system architecture.)
# If you set the value of query_cache_size too small, a warning
# will occur, as described in Section 8.9.3.3, "Query Cache
# Configuration". 
query_cache_size=32M

#####################################################################################

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid